name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  PYTHON_VERSION: '3.10'
  NODE_VERSION: '18'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt || pip install -e .

    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci

    - name: Run Python tests
      run: |
        cd backend
        python -m pytest tests/ -v --cov=app --cov-report=xml
      env:
        POSTGRES_SERVER: localhost
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: test_db
        SECRET_KEY: test-secret-key
        FIRST_SUPERUSER: test@example.com
        FIRST_SUPERUSER_PASSWORD: test-password

    - name: Run Node.js tests
      run: |
        cd frontend
        npm run test || echo "No test script found"

    - name: Build Docker images
      run: |
        docker build -t mosaic-backend:test ./backend
        docker build -t mosaic-frontend:test ./frontend

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY_STAGING }}

    - name: Add EC2 to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.EC2_HOST_STAGING }} >> ~/.ssh/known_hosts

    - name: Deploy to Staging
      run: |
        ssh ec2-user@${{ secrets.EC2_HOST_STAGING }} << 'EOF'
          cd mosaic-project-cs4800
          git pull origin develop
          chmod +x deploy-github-actions.sh
          ./deploy-github-actions.sh ${{ secrets.EC2_HOST_STAGING }}
          docker compose -f docker-compose.production.yml down
          docker compose -f docker-compose.production.yml up -d --build
          sleep 30
          docker compose -f docker-compose.production.yml ps
        EOF

    - name: Run smoke tests
      run: |
        sleep 10
        curl -f http://${{ secrets.EC2_HOST_STAGING }}:8000/api/v1/utils/health-check/ || exit 1
        curl -f http://${{ secrets.EC2_HOST_STAGING }} || exit 1

  deploy-production:
    name: Deploy to Production
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

    - name: Add EC2 to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Create deployment backup
      run: |
        ssh ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
          cd mosaic-project-cs4800
          # Create backup of current deployment
          docker compose -f docker-compose.production.yml exec -T db pg_dump -U postgres app > backup-$(date +%Y%m%d-%H%M%S).sql || echo "No database to backup"
        EOF

    - name: Deploy to Production
      run: |
        ssh ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
          cd mosaic-project-cs4800
          git pull origin main || git pull origin master
          chmod +x deploy-github-actions.sh
          ./deploy-github-actions.sh ${{ secrets.EC2_HOST }}
          docker compose -f docker-compose.production.yml down
          docker compose -f docker-compose.production.yml up -d --build
          sleep 30
          docker compose -f docker-compose.production.yml ps
        EOF

    - name: Verify deployment
      run: |
        sleep 10
        # Test backend health
        curl -f http://${{ secrets.EC2_HOST }}:8000/api/v1/utils/health-check/ || exit 1
        # Test frontend
        curl -f http://${{ secrets.EC2_HOST }} || exit 1
        echo "✅ Deployment successful!"

    - name: Notify deployment success
      if: success()
      run: |
        echo "🚀 Deployment to production successful!"
        echo "Frontend: http://${{ secrets.EC2_HOST }}"
        echo "Backend: http://${{ secrets.EC2_HOST }}:8000"
        echo "API Docs: http://${{ secrets.EC2_HOST }}:8000/docs"

    - name: Rollback on failure
      if: failure()
      run: |
        echo "❌ Deployment failed, rolling back..."
        ssh ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
          cd mosaic-project-cs4800
          docker compose -f docker-compose.production.yml down
          # Restore from backup if available
          docker compose -f docker-compose.production.yml up -d
        EOF
        exit 1
