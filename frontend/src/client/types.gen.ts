// This file is auto-generated by @hey-api/openapi-ts

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type DashboardStats = {
    active_projects: number;
    upcoming_deadlines: number;
    team_members: number;
    completed_this_month: number;
};

export type GalleriesPublic = {
    data: Array<GalleryPublic>;
    count: number;
};

export type GalleryCreate = {
    name: string;
    date?: (string | null);
    photo_count?: number;
    photographer?: (string | null);
    status?: string;
    cover_image_url?: (string | null);
    project_id: string;
};

export type GalleryPublic = {
    name: string;
    date?: (string | null);
    photo_count?: number;
    photographer?: (string | null);
    status?: string;
    cover_image_url?: (string | null);
    id: string;
    created_at: string;
    project_id: string;
};

export type GalleryUpdate = {
    name?: (string | null);
    date?: (string | null);
    photo_count?: (number | null);
    photographer?: (string | null);
    status?: (string | null);
    cover_image_url?: (string | null);
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type ItemCreate = {
    title: string;
    description?: (string | null);
};

export type ItemPublic = {
    title: string;
    description?: (string | null);
    id: string;
    owner_id: string;
};

export type ItemsPublic = {
    data: Array<ItemPublic>;
    count: number;
};

export type ItemUpdate = {
    title?: (string | null);
    description?: (string | null);
};

export type Message = {
    message: string;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type PrivateUserCreate = {
    email: string;
    password: string;
    full_name: string;
    is_verified?: boolean;
};

export type ProjectCreate = {
    name: string;
    client_name: string;
    client_email?: (string | null);
    description?: (string | null);
    status?: string;
    deadline?: (string | null);
    start_date?: (string | null);
    budget?: (string | null);
    progress?: number;
    organization_id: string;
};

export type ProjectPublic = {
    name: string;
    client_name: string;
    client_email?: (string | null);
    description?: (string | null);
    status?: string;
    deadline?: (string | null);
    start_date?: (string | null);
    budget?: (string | null);
    progress?: number;
    id: string;
    created_at: string;
    updated_at: string;
    organization_id: string;
};

export type ProjectsPublic = {
    data: Array<ProjectPublic>;
    count: number;
};

export type ProjectUpdate = {
    name?: (string | null);
    client_name?: (string | null);
    client_email?: (string | null);
    description?: (string | null);
    status?: (string | null);
    deadline?: (string | null);
    start_date?: (string | null);
    budget?: (string | null);
    progress?: (number | null);
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password: string;
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    id: string;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: (string | null);
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserUpdate = {
    email?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password?: (string | null);
};

export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type GalleriesReadGalleriesData = {
    limit?: number;
    projectId?: (string | null);
    skip?: number;
};

export type GalleriesReadGalleriesResponse = (GalleriesPublic);

export type GalleriesCreateGalleryData = {
    requestBody: GalleryCreate;
};

export type GalleriesCreateGalleryResponse = (GalleryPublic);

export type GalleriesReadGalleryData = {
    id: string;
};

export type GalleriesReadGalleryResponse = (GalleryPublic);

export type GalleriesUpdateGalleryData = {
    id: string;
    requestBody: GalleryUpdate;
};

export type GalleriesUpdateGalleryResponse = (GalleryPublic);

export type GalleriesDeleteGalleryData = {
    id: string;
};

export type GalleriesDeleteGalleryResponse = (Message);

export type ItemsReadItemsData = {
    limit?: number;
    skip?: number;
};

export type ItemsReadItemsResponse = (ItemsPublic);

export type ItemsCreateItemData = {
    requestBody: ItemCreate;
};

export type ItemsCreateItemResponse = (ItemPublic);

export type ItemsReadItemData = {
    id: string;
};

export type ItemsReadItemResponse = (ItemPublic);

export type ItemsUpdateItemData = {
    id: string;
    requestBody: ItemUpdate;
};

export type ItemsUpdateItemResponse = (ItemPublic);

export type ItemsDeleteItemData = {
    id: string;
};

export type ItemsDeleteItemResponse = (Message);

export type LoginLoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginTestTokenResponse = (UserPublic);

export type LoginRecoverPasswordData = {
    email: string;
};

export type LoginRecoverPasswordResponse = (Message);

export type LoginResetPasswordData = {
    requestBody: NewPassword;
};

export type LoginResetPasswordResponse = (Message);

export type LoginRecoverPasswordHtmlContentData = {
    email: string;
};

export type LoginRecoverPasswordHtmlContentResponse = (string);

export type PrivateCreateUserData = {
    requestBody: PrivateUserCreate;
};

export type PrivateCreateUserResponse = (UserPublic);

export type ProjectsReadProjectsData = {
    limit?: number;
    skip?: number;
};

export type ProjectsReadProjectsResponse = (ProjectsPublic);

export type ProjectsCreateProjectData = {
    requestBody: ProjectCreate;
};

export type ProjectsCreateProjectResponse = (ProjectPublic);

export type ProjectsReadDashboardStatsResponse = (DashboardStats);

export type ProjectsReadProjectData = {
    id: string;
};

export type ProjectsReadProjectResponse = (ProjectPublic);

export type ProjectsUpdateProjectData = {
    id: string;
    requestBody: ProjectUpdate;
};

export type ProjectsUpdateProjectResponse = (ProjectPublic);

export type ProjectsDeleteProjectData = {
    id: string;
};

export type ProjectsDeleteProjectResponse = (Message);

export type UsersReadUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersCreateUserData = {
    requestBody: UserCreate;
};

export type UsersCreateUserResponse = (UserPublic);

export type UsersReadUserMeResponse = (UserPublic);

export type UsersDeleteUserMeResponse = (Message);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserPublic);

export type UsersUpdatePasswordMeData = {
    requestBody: UpdatePassword;
};

export type UsersUpdatePasswordMeResponse = (Message);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserPublic);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserPublic);

export type UsersUpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserResponse = (UserPublic);

export type UsersDeleteUserData = {
    userId: string;
};

export type UsersDeleteUserResponse = (Message);

export type UtilsTestEmailData = {
    emailTo: string;
};

export type UtilsTestEmailResponse = (Message);

export type UtilsHealthCheckResponse = (boolean);

export type UtilsGetSystemInfoResponse = ({
    [key: string]: unknown;
});